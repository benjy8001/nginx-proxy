#!/usr/bin/env bash -euo pipefail
# Nginx Proxy  installer.
LATEST_VERSION_URL="https://github.com/benjy8001/nginx-proxy.git"
CLI_NAME="Nginx Proxy"

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"



function output {
    style_start=""
    style_end=""
    if [ "${2:-}" != "" ]; then
    case $2 in
        "success")
            style_start="\033[0;32m"
            style_end="\033[0m"
            ;;
        "error")
            style_start="\033[31;31m"
            style_end="\033[0m"
            ;;
        "info"|"warning")
            style_start="\033[33m"
            style_end="\033[39m"
            ;;
        "heading")
            style_start="\033[1;33m"
            style_end="\033[22;39m"
            ;;
    esac
    fi

    builtin echo -e "${style_start}${1}${style_end}"
}



function register_nginx_proxy() {

  if grep -q -E "export NGINX_PROXY=(enabled|disabled)" $1
  then
      output "  [*] nginx proxy already enabled " "info"
  else
     echo  "export NGINX_PROXY=enabled" >> $1
     output "  [*] nginx proxy enabled " "success"
  fi

  if grep -Fxq "export NGINX_PROXY_DIRECTORY=$DIR" $1
  then
      output "  [*] nginx proxy directory already registered" "info"
  else
      echo  "export NGINX_PROXY_DIRECTORY=$DIR" >> $1
      output "  [*] nginx proxy directory enabled " "success"
  fi

  if grep -Fxq 'PATH=$PATH:$NGINX_PROXY_DIRECTORY/bin' $1
  then
      output "  [*] nginx proxy path already registered" "info"
  else
      echo  'PATH=$PATH:$NGINX_PROXY_DIRECTORY/bin' >> $1
      output "  [*] nginx proxy path enabled " "success"
  fi
  output "  [*] nginx proxy registered in $1" "success"
  output "\n  you should reload your shell configuration " "info"
  output "\n  $ source $1 \n" "error"
}

output "${CLI_NAME} installer" "heading"

# Run environment checks.
output "\nEnvironment check" "heading"

# Check that cURL or wget is installed.
downloader=""
command -v curl >/dev/null 2>&1
if [ $? == 0 ]; then
    downloader="curl"
    output "  [*] cURL is installed" "success"
else
    command -v wget >/dev/null 2>&1
    if [ $? == 0 ]; then
        downloader="wget"
        output "  [*] wget is installed" "success"
    else
        output "  [ ] ERROR: cURL or wget is required for installation." "error"
        exit 1
    fi
fi


# Check that Git is installed.
command -v git >/dev/null 2>&1
if [ $? == 0 ]; then
    output "  [*] Git is installed" "success"
else
    output "  [ ] Warning: Git will be needed." "warning"
fi

# The necessary checks have passed. Start downloading the right version.
output "\nDownload" "heading"


current_shell="$(basename -- $SHELL)"
case ${current_shell} in
    "zsh")
        register="register_nginx_proxy $HOME/.zshrc"
        ;;
    "bash")
        register="register_nginx_proxy $HOME/.bashrc"
        ;;
    *)
        output "Shell '${current_shell}' not supported" "error"
        exit 1
        ;;
esac

# downloading the projet
git clone -q $LATEST_VERSION_URL .
output "  [*] nginx-proxy downloaded" "success"
output "\nRegistering" "heading"
# registering project path in shell

$register

output "\nInstall Successfull\n" "success"
